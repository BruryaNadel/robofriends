{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filterRobots","filter","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,sBAAKC,UAAY,gEAAjB,UACI,qBAAKC,IAAM,SAASC,IAAG,+BAA4BH,EAA5B,cAC3B,gCACI,6BAAKF,IACL,4BAAIC,WCcDK,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,8BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCKlBC,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKT,UAAU,MAAf,SACA,uBACAA,UAAY,mCACZU,KAAO,SACPC,YAAc,gBACdC,SAAYH,OCCLI,EARA,SAACC,GACZ,OACA,qBAAKC,MAAS,CAACC,UAAW,SAAUC,OAAQ,oBAAqBC,OAAQ,SAAzE,SACCJ,EAAMK,YCoCIC,G,wDAlCX,aAAc,IAAD,8BACT,gBAWJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAXzC,EAAKC,MAAQ,CACTvB,OAAQ,GACRoB,YAAa,IAJR,E,gEAOO,IAAD,OACfI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACnB,OAAQ4B,S,+BAK/B,IAAD,EAC0BC,KAAKN,MAA5BvB,EADH,EACGA,OAAQoB,EADX,EACWA,YACTU,EAAe9B,EAAO+B,QAAO,SAAA/B,GAC/B,OAAOA,EAAOP,KAAKuC,cAAcC,SAASb,EAAYY,kBAE1D,OAAShC,EAAOkC,OAGZ,sBAAKtC,UAAY,KAAjB,UACA,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAAgBwB,KAAKZ,iBAChC,cAAC,EAAD,UACI,cAAC,EAAD,CAAUjB,OAAU8B,SANxB,6C,GAtBMK,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,8BACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.00777c60.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return(\r\n        <div className = 'card tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5 h-nl'>\r\n            <img alt = 'robots' src = {`https://robohash.org/${id}?200x200`} />\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n        </div>\r\n    );\r\n} \r\n\r\nexport default Card;\r\n\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return(\r\n                        <Card \r\n                            key={i}\r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email}    \r\n                            /> \r\n                    );\r\n                })\r\n            }    \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <div className='pa2'>\r\n        <input \r\n        className = 'pa3 ba b--green bg-lightest-blue' \r\n        type = 'search' \r\n        placeholder = 'search robots'\r\n        onChange = {searchChange}\r\n        />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return( \r\n    <div style = {{overflowY: 'scroll', border: '5px solid #0ccac4', height: '800px'}}>\r\n    {props.children}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>response.json())\r\n        .then(users=>this.setState({robots: users}));\r\n    }\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n    render(){\r\n        const {robots, searchfield} = this.state;\r\n        const filterRobots = robots.filter(robots=>{\r\n            return robots.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        return ! robots.length ?\r\n            <h1>loading</h1>:\r\n        (\r\n            <div className = 'tc'>\r\n            <h1 className='f1'>RoboFriends</h1>\r\n            <SearchBox searchChange = {this.onSearchChange}/>\r\n            <Scroll>\r\n                <CardList robots = {filterRobots} />\r\n            </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <div>\r\n      <App/>\r\n     </div>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}